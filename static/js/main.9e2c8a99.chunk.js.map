{"version":3,"sources":["assets/grassSkin.jpg","assets/apple.jpg","assets/skin.jpg","components/block/block.js","components/grid/grid.js","components/home/Home.js","App.js","index.js"],"names":["Block","he","wi","rot","style","col","window","innerHeight","innerWidth","type","dir","snakeSkin","grass","apple","height","width","transform","alt","className","src","Grid","newScore","initial","i","push","k","randomPos","x","Math","floor","random","y","useState","row","setRow","snake","setSnake","direction","setDirection","food","setFood","collision","pos","length","document","addEventListener","e","keyCode","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newSnake","alert","forEach","cell","prev","pop","newRows","displaySnake","displayRows","map","Home","score","setScore","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9e2c8a99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/grassSkin.dda7373c.jpg\";","export default __webpack_public_path__ + \"static/media/apple.dd19f267.jpg\";","export default __webpack_public_path__ + \"static/media/skin.7756d807.jpg\";","import React from \"react\";\r\nimport \"./block.css\"\r\nimport grass from '../../assets/grassSkin.jpg'\r\nimport apple from '../../assets/apple.jpg'\r\nimport snakeSkin from '../../assets/skin.jpg'\r\n\r\nconst Block = ({col}) => {\r\n    let he, wi, rot,style;\r\n    if (window.innerHeight < window.innerWidth) {\r\n        he = \"4vh\";\r\n        wi = \"4vh\";\r\n    } else {\r\n        he = \"4vw\";\r\n        wi = \"4vw\";\r\n    }\r\n    switch (col.type) {\r\n        case 0:\r\n            switch (col.dir) {\r\n                case 'right':\r\n                    rot = 'rotate(0deg)'\r\n                    break;\r\n                case 'left':\r\n                    rot = 'rotate(0deg)'\r\n                    break\r\n                case 'up':\r\n                    rot = 'rotate(90deg)'\r\n                    break;\r\n                case 'down':\r\n                    rot = 'rotate(90deg)'\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n            col = snakeSkin\r\n            break;\r\n        case 1:\r\n            col = grass\r\n            rot = 'rotate(0deg)'\r\n            break;\r\n        case 2:\r\n            col = apple\r\n            rot = 'rotate(0deg)'\r\n            break;\r\n        default:\r\n            break;\r\n\r\n    }\r\n    style = {height:he,width:wi,transform: rot}\r\n    return <img alt='block' className=\"block blockBlue\" src={col}\r\n                style={style}/>\r\n}\r\n\r\nexport default Block","import React, {useEffect, useRef, useState} from \"react\"\r\nimport Block from \"../block/block\";\r\nimport \"./grid.css\"\r\n\r\nconst Grid = ({newScore}) => {\r\n    let rows = 20, cols = 20, initial = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        initial.push([]);\r\n        for (let k = 0; k < cols; k++) {\r\n            initial[i].push({type: 1})\r\n        }\r\n    }\r\n    const randomPos = () => {\r\n        return {\r\n            x: Math.floor(Math.random() * rows),\r\n            y: Math.floor(Math.random() * cols)\r\n        };\r\n    }\r\n\r\n    const [row, setRow] = useState(initial);\r\n    const [snake, setSnake] = useState([{x: 0, y: 0, dir: 'right'}, {x: 1, y: 0, dir: 'right'}]);\r\n    const [direction, setDirection] = useState('right');\r\n    const [food, setFood] = useState(randomPos);\r\n\r\n\r\n    const collision = (pos) => {\r\n        for (let i = 0; i < snake.length; i++) {\r\n            if (snake[i].x === pos.x && snake[i].y === pos.y) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    const changeDir = (e) => {\r\n        let key = e.keyCode;\r\n        switch (key) {\r\n            case 37:\r\n                if (direction === 'right')\r\n                    break;\r\n                setDirection('left');\r\n                break;\r\n            case 38:\r\n                if (direction !== 'bottom')\r\n                    setDirection('top');\r\n                break;\r\n            case 39:\r\n                if (direction !== 'left')\r\n                    setDirection('right');\r\n                break;\r\n            case 40:\r\n                if (direction !== 'top')\r\n                    setDirection('bottom');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    document.addEventListener(\"keydown\", changeDir);\r\n\r\n    const displaySnake = () => {\r\n        const newRows = initial;\r\n        snake.forEach(cell => {\r\n            newRows[cell.x][cell.y] = {type: 0, dir: cell.dir};\r\n        })\r\n        newRows[food.x][food.y] = {type: 2};\r\n        setRow(newRows);\r\n    }\r\n\r\n    const moveSnake = () => {\r\n        const newSnake = [];\r\n        let pos;\r\n        switch (direction) {\r\n            case 'right':\r\n                pos = {x: snake[0].x, y: (snake[0].y + 1) % rows, dir: \"right\"}\r\n                break;\r\n            case 'left':\r\n                pos = {x: snake[0].x, y: (snake[0].y - 1 + rows) % rows, dir: \"left\"}\r\n                break;\r\n            case 'top':\r\n                pos = {x: (snake[0].x - 1 + cols) % cols, y: snake[0].y, dir: \"up\"}\r\n                break;\r\n            case 'bottom':\r\n                pos = {x: (snake[0].x + 1) % cols, y: snake[0].y, dir: 'down'}\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        newSnake.push(pos)\r\n        if (collision(pos)) {\r\n            alert(\"Game over\")\r\n            newScore(0);\r\n            setSnake([{x: 0, y: 0, dir: 'right'}, {x: 1, y: 0, dir: 'right'}])\r\n            setDirection('right')\r\n            return\r\n        }\r\n        snake.forEach(cell => {\r\n            newSnake.push(cell);\r\n        })\r\n        if (snake[0].x === food.x && snake[0].y === food.y) {\r\n            newScore((prev) => prev + 1);\r\n            let pos = randomPos()\r\n            while (collision(pos)) {\r\n                pos = randomPos()\r\n            }\r\n            setFood(pos);\r\n        } else {\r\n            newSnake.pop();\r\n        }\r\n        setSnake(newSnake);\r\n        displaySnake();\r\n    }\r\n\r\n    const useInterval = (callback, delay) => {\r\n        const savedCallback = useRef();\r\n\r\n        // Remember the latest callback.\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        // Set up the interval.\r\n        useEffect(() => {\r\n            function tick() {\r\n                savedCallback.current();\r\n            }\r\n\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    useInterval(moveSnake, 200);\r\n\r\n    const displayRows = row.map(row =>\r\n        <li>\r\n            {row.map(e => {\r\n                return <Block col={e}/>\r\n            })\r\n            }\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <div className='grid'>\r\n            <ul>\r\n                {displayRows}\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default Grid;","import React, {useState} from \"react\";\r\nimport Grid from \"../grid/grid\";\r\nimport './home.css'\r\n\r\nconst Home = ()=>{\r\n    const [score,setScore] = useState(0)\r\n    return(\r\n        <div className='home'>\r\n            <h1>Score {score}</h1>\r\n            <Grid newScore = {setScore}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import './App.css';\r\nimport Home from \"./components/home/Home\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Home/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}